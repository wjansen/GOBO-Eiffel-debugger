note

	description:
		"[ 
		 Class scanning the persistence closure of one object.
		 The items of the closure must be linearly arranged,
		 e.g., given by a previous serialization. 
		 ]"

class PC_SERIAL_DRIVER [TI_]
	-- TI_: type of idents generated by the `target' 
	-- NATURAL: type of idents generated by the `source' 

inherit

	PC_DRIVER [TI_, NATURAL]
		rename
			common_traverse as traverse
		export {ANY}
			traverse
		redefine
			source
		end
	
create

	make
	
feature {} -- Initialization
	
	make (t: like target; s: like source; opts: INTEGER)
		note
			action: ""
			t: "traversal target"
			s: "traversal source"
			opts: "options"
		require
			valid_flags: valid_flags (opts)
			when_target_expands_strings: t.must_expand_strings implies s.can_expand_strings
			when_source_expands_strings: s.must_expand_strings implies t.can_expand_strings
		local
			oo: like known_objects;
			n: INTEGER
		do
			n := 100
			create {PC_LINEAR_TABLE [PC_TYPED_IDENT [TI_]]} oo.make (n)
			common_make (t, s, opts, oo)
		ensure
			taget_set: target = t
			source_set: source = s
		end

feature -- Access

	source: PC_SERIAL_SOURCE [NATURAL]

	valid_flags (f: INTEGER): BOOLEAN
		do
			Result := f & Forward_flag < Forward_flag
		end

feature {} -- Scanning structures 
	
	process_closure
		local
			si, si0, si1: detachable NATURAL
			ready: BOOLEAN
		do
			from
				source.read_next_ident
				si := source.last_ident
				if deep or forward then
					si1 := si
				end
				ready := si = si0
				if not ready then
					process_announcement (si)
				end
			until ready loop
				source.read_next_ident
				si := source.last_ident
				ready := si = si1
				if not ready then
					process_data (si)
				end
				if si1 = si0 then
					si1 := si
				end
			end
			source_root_ident := si1
		end

	add_announced (si: NATURAL)
		do
		end
	
invariant
	
note

	author: "Wolfgang Jansen"
	date: "$Date$"
	revision: "$Revision$"

end
